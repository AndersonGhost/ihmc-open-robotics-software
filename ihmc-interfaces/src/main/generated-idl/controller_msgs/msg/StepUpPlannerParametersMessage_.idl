#ifndef __controller_msgs__msg__StepUpPlannerParametersMessage__idl__
#define __controller_msgs__msg__StepUpPlannerParametersMessage__idl__

#include "controller_msgs/msg/./StepUpPlannerCostWeights_.idl"
#include "controller_msgs/msg/./StepUpPlannerPhaseParameters_.idl"
module controller_msgs
{
  module msg
  {
    module dds
    {

      @TypeCode(type="controller_msgs::msg::dds_::StepUpPlannerParametersMessage_")
      struct StepUpPlannerParametersMessage
      {
        /**
         * Phases definition
         */
        sequence<controller_msgs::msg::dds::StepUpPlannerPhaseParameters, 20> phases_parameters;
        /**
         * Number of control cycles per phase
         */
        @defaultValue(value=30)
        unsigned long long phase_length;
        /**
         * Solver verbosity (0 to disable printing, 1 prints the timing, >1 increase IPOPT printing level
         */
        @defaultValue(value=1)
        unsigned long long solver_verbosity;
        /**
         * Maximum distance between the CoM and the foot
         */
        @defaultValue(value=2.0)
        double max_leg_length;
        /**
         * Ipopt internal linear solver
         */
        string ipopt_linear_solver;
        /**
         * Percentage of the last phase in which weighting the error from the desired value
         */
        @defaultValue(value=0.3)
        double final_state_anticipation;
        /**
         * Static friction coefficient
         */
        @defaultValue(value=1.0)
        double static_friction_coefficient;
        /**
         * Torsional friction coefficient
         */
        @defaultValue(value=1.0)
        double torsional_friction_coefficient;
        /**
         * The weights for the cost function
         */
        controller_msgs::msg::dds::StepUpPlannerCostWeights cost_weights;
        /**
         * Unique ID used to identify this message, should preferably be consecutively increasing.
         */
        unsigned long sequence_id;
        /**
         * Include a set of CenterOfMassTrajectoryMessages in the respond
         */
        boolean include_com_messages;
        /**
         * Send the CenterOfMassTrajectoryMessages directly (the topic name has also to be specified)
         */
        boolean send_com_messages;
        /**
         * Topic name of IHMC controller accepting the CenterOfMassTrajectoryMessage
         */
        string com_messages_topic;
        /**
         * Maximum number of points to be defined in a single CenterOfMassTrajectoryMessage
         */
        @defaultValue(value=50)
        unsigned long long max_com_message_length;
        /**
         * Include a set of PelvisHeightTrajectoryMessages in the respond
         */
        boolean include_pelvis_height_messages;
        /**
         * Send the PelvisHeightTrajectoryMessages directly (the topic name has also to be specified)
         */
        boolean send_pelvis_height_messages;
        /**
         * A delta to be added to the CoM height to retrieve the pelvis height
         */
        double pelvis_height_delta;
        /**
         * Topic name of IHMC controller accepting the PelvisHeightTrajectoryMessages
         */
        string pelvis_height_messages_topic;
        /**
         * Maximum number of points to be defined in a single PelvisHeightTrajectoryMessages
         */
        @defaultValue(value=50)
        unsigned long long max_pelvis_height_message_length;
        /**
         * Include a set of FootstepDataListMessage as well
         */
        boolean include_footstep_messages;
        /**
         * Send a FootstepDataListMessage as well
         */
        boolean send_footstep_messages;
        /**
         * Topic name of IHMC controller accepting the FootstepDataListMessage (the topic name has also to be specified)
         */
        string footstep_messages_topic;
      };
    };
  };
};

#endif
